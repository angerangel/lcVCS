on motionStart
   send randomLines to group "drawing" 
end motionStart

on preOpenStack
   if the platform = "iphone" then
      iphoneUseDeviceResolution true,true
   end if
   set the acceleratedRendering of this stack to true
   if the environment = "mobile" then
      set the rect of this stack to the working screenRect
   end if
end preOpenStack

on clearDrawing
   lock screen
   repeat with X=the number of grcs in group "drawing" down to 1
      if word 1 of the short name of grc X of group "drawing" = "line" then
         delete grc X of group "drawing"
      end if
   end repeat
   put "" into image "photo"
end clearDrawing

on resizeStack pWidth,pHeight
   lock screen
   clearDrawing
   -- deal with different screen densities
   if the environment = "mobile" then
      scaleStack the short name of this stack,mobilePixelDensity()
   end if
   put the loc of field "heading" into tLoc
   put item 1 of the loc of this cd into item 1 of tLoc
   set the loc of field "heading" to tLoc
   put the rect of grc "background" into tRect
   put pWidth into item 3 of tRect
   put pHeight - the the height of btn "photo" into item 4 of tRect
   set the rect of grc "background" to tRect
   set the rect of image "photo" to tRect
   set the topLeft of btn "photo" to 0,the bottom of grc "background"
   set the topLeft of btn "share" to the topRight of btn "photo"
   set the topRight of btn "Clear" to pWidth,the bottom of grc "background"
end resizeStack

on scaleStack pStack,pScale
   try
      set the textSize of the target to round(the effective textSize of stack pStack*pScale)
      repeat with tCard=1 to the number of cards of stack pStack
         repeat with tControl=1 to the number of controls of cd tCard of stack pStack
            scaleObject  the long ID of control tControl of cd tCard of stack pStack,pScale
         end repeat
      end repeat
   catch e
      answer e
   end try
end scaleStack

on scaleObject pObject,pScale
   if not (word 1 of pObject = "group" and not the lockLocation of pObject) then
      put the rect of pObject into tRect
      repeat with X=1 to 4
         put round(item X of tRect*pScale) into item X of tRect
      end repeat
      set the rect of pObject to tRect
   end if
   -- text
   if the textSize of pObject <> "" then
      set the textSize of pObject to round(the textSize of pObject * pScale)
   end if
   -- graphic effects
   if the outerGlow["size"] of pObject <> "" then
      set the outerGlow["size"] of pObject to round(the outerGlow["size"] of pObject * pScale)
      set the outerGlow["spread"] of pObject to round(the outerGlow["spread"] of pObject * pScale)
   end if
   if the innerGlow["size"] of pObject <> "" then
      set the innerGlow["size"] of pObject to round(the innerGlow["size"] of pObject  * pScale)
      set the innerGlow["spread"] of pObject to round(the innerGlow["spread"] of pObject * pScale)
   end if
   if the dropShadow["size"] of pObject <> "" then
      set the dropShadow["size"] of pObject to round(the dropShadow["size"] of pObject * pScale)
      set the dropShadow["spread"] of pObject to round(the dropShadow["spread"] of pObject * pScale)
      set the dropShadow["distance"] of pObject to round(the dropShadow["distance"] of pObject * pScale)
   end if
   if the innerShadow["size"] of pObject <> "" then
      set the innerShadow["size"] of pObject to round(the innerShadow["size"] of pObject * pScale)
      set the innerShadow["spread"] of pObject to round(the innerShadow["spread"] of pObject * pScale)
      set the innerShadow["distance"] of pObject to round(the innerShadow["distance"] of pObject * pScale)
   end if
   -- more specific object properties
   switch word 1 of pObject
      case "graphic"
         if the style of pObject = "roundrect" then
            set the roundRadius of pObject to round(the roundRadius of pObject*pScale)
         end if
         set the lineSize of pObject to round(the lineSize of pObject*pScale)
         break
      case "button"
      case "field"
      case "group"
         -- margins
         put the margins of pObject into tMargins
         repeat with X=1 to 4
            if item X of tMargins <> "" then
               put round(item X of tMargins*pScale) into item X of tMargins
            end if
         end repeat
         set the margins of pObject to tMargins
         break
   end switch
end scaleObject
