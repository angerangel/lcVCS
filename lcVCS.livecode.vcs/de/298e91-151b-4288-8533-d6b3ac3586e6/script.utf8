local sProjects,sFetched

on preOpenStack
   ResetProjects
end preOpenStack

on resumeStack
  ResetProjects
end resumeStack

on ResetProjects pIndex
   if pIndex is not a number then
      put the dgHilitedIndex of group "projects" into pIndex
   end if
   try
      put JSONToArray(url ("binfile:"&ProjectsFile())) into sProjects
   end try
   repeat for each key tIndex in sProjects
      if there is not a file sProjects[tIndex] then
         delete variable sProjects[tIndex]
      else
         try
            put JSONToArray(url ("binfile:"&sProjects[tIndex])) into tData[tIndex]
         end try
      end if
   end repeat
   set the dgData of group "projects" to tData
   
   set the dgHilitedIndex of group "projects" to pIndex
   if the dgHilitedIndex of group "projects" is empty AND tIndex > 0 then
      put 1 into pIndex
      set the dgHilitedIndex of group "projects" to pIndex
   end if
      
   dispatch "selectionChanged" to group "projects" with pIndex
end ResetProjects

on AddProject pPath
   repeat for each key tIndex in sProjects
      if sProjects[tIndex] is pPath then
         exit AddProject
      end if
   end repeat
   try
      put JSONToArray(url ("binfile:"&pPath)) into tData
   end try
   if tData is not an array then
      -- default values
      set the itemDelimiter to slash
      put item -2 of pPath into tData["name"]
   end if
   put the dgHilitedIndex of group "projects" into tOldIndex
   dispatch "AddData" to group "projects" with tData
   put the result into tIndex
   set the dgHilitedIndex of group "projects" to tIndex
   dispatch "ScrollIndexIntoView" to group "projects" with tIndex
   dispatch "selectionChanged" to group "projects" with tIndex,tOldIndex
   SaveProject tIndex
   put pPath into sProjects[max(replaceText(the keys of tProjects,cr,comma)) + 1]
   put ArrayToJSON(sProjects) into url ("binfile:"&ProjectsFile())
end AddProject

on DeleteProject pIndex
   delete variable sProjects[pIndex]
   dispatch "DeleteIndex" to group "projects" with pIndex
   if sProjects is an array then
      if the number of elements of sProjects > 0 then
         set the dgHilitedLine of group "projects" to 1
         dispatch "ScrollIndexIntoView" to group "projects" with 1
         dispatch "selectionChanged" to group "projects" with 1
      end if
   else
      ClearAndDisable
   end if
   put ArrayToJSON(sProjects) into url ("binfile:"&ProjectsFile())
end DeleteProject

on SaveProject pIndex
   if pIndex is not empty then
      put the dgDataOfIndex[pIndex] of group "projects" into tData
      put fld "build path" into tData["build path"]
      put the dgData of group "stackFiles" into tStacks
      repeat for each item tIndex in the dgIndexes of group "stackFiles"
         add 1 to i
         put tStacks[tIndex]["file"] into tData["stackFiles"][i]
      end repeat
      put ArrayToJSON(tData,,true) into url ("binfile:"&sProjects[pIndex])
      set the dgDataOfIndex[pIndex] of group "projects" to tData
   end if
end SaveProject

on ClearAndDisable
   put empty into fld "project path"
   put empty into fld "build path"
   set the dgData of group "stackFiles" to empty 
end ClearAndDisable

function PathForProject pIndex
   set the itemDel to slash
   return item 1 to -2 of sProjects[pIndex]
end PathForProject

on ExportProjectAtIndex pIndex
   ExportProject sProjects[pIndex]
end ExportProjectAtIndex

on ImportProjectAtIndex pIndex
   ImportProject sProjects[pIndex]
end ImportProjectAtIndex

on lcVCSExport
   if the target is me then
      set the dgData of group "Projects" to empty
      set the dgData of group "Stackfiles" to empty
      set the text of fld "project path" to empty
      set the text of fld "build path" to empty
      set the height of me to 400
      put empty into btn "tags"
   end if
end lcVCSExport

on UpdateTags pIndex
   local tCurrentBranch,tPath,tOldDefaultFolder,tList,tBranches,tBranch
   if pIndex is the dgHilitedIndex of group "projects" then
      put PathForProject(pIndex) into tPath
      put the defaultFolder into tOldDefaultFolder
      set the defaultFolder to tPath
      put shell("git tag") into tList
      put shell("git branch") into tBranches
      filter tBranches without "*(no branch)"
      repeat for each line tBranch in tBranches
         if word 1 of tBranch is "*" then
            delete word 1 of tBranch
            put tBranch into tCurrentBranch
         end if
         put word 1 to -1 of tBranch &cr after tList
      end repeat
      delete char -1 of tList
      put tList into btn "tags"
      if tCurrentBranch is empty then
         put shell("git describe") into tCurrentBranch
      end if
      if tCurrentBranch contains "cannot describe" then
         set the label of btn "tags" to tab
         disable btn "tags"
      else
         set the label of btn "tags" to tCurrentBranch
         enable btn "tags"
      end if
      set the defaultFolder to tOldDefaultFolder
   end if
end UpdateTags

on Checkout pIndex,pTagOrBranch
   put PathForProject(pIndex) into tPath
   put the defaultFolder into tOldDefaultFolder
   set the defaultFolder to tPath
   put empty into fld "progress"
   get shell("git checkout "&pTagOrBranch)
   answer it as sheet
   set the defaultFolder to tOldDefaultFolder
end Checkout
