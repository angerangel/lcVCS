local sProjects

function ProjectsFile
   put specialFolderPath("support")&"/lcVCS" into tFolder
   if there is not a folder tFolder then
      create folder tFolder
   end if
   return tFolder&"/lcVCSProjects.json"
end ProjectsFile

on preOpenStack
   try
      put JSONToArray(url ("binfile:"&ProjectsFile())) into sProjects
   end try
   repeat with tIndex = 1 to the number of elements of sProjects
      try
         put JSONToArray(url ("binfile:"&sProjects[tIndex])) into tData[tIndex]
      end try
   end repeat
   set the dgData of group "projects" to tData
end preOpenStack

on AddProject pPath
   repeat for each key tIndex in sProjects
      if sProjects[tIndex] is pPath then
         exit AddProject
      end if
   end repeat
   try
      put JSONToArray(url ("binfile:"&pPath)) into tData
   end try
   if tData is not an array then
      -- default values
      set the itemDelimiter to slash
      put item -2 of pPath into tData["name"]
   end if
   put the dgHilitedIndex of group "projects" into tOldIndex
   dispatch "AddData" to group "projects" with tData
   put the result into tIndex
   set the dgHilitedIndex of group "projects" to tIndex
   dispatch "ScrollIndexIntoView" to group "projects" with tIndex
   dispatch "selectionChanged" to group "projects" with tIndex,tOldIndex
   SaveProject tIndex
   put pPath into sProjects[the number of elements of sProjects + 1]
   put ArrayToJSON(sProjects) into url ("binfile:"&ProjectsFile())
end AddProject

on DeleteProject pIndex
   repeat with tIndex = pIndex to the number of elements of sProjects
      put sProjects[tIndex+1] into sProjects[tIndex]
   end repeat
   delete variable sProjects[the number of elements of sProjects]
   dispatch "DeleteIndex" to group "projects" with pIndex
   if sProjects is an array then
      set the dgHilitedIndex of group "projects" to max(1,pIndex-1)
      dispatch "ScrollIndexIntoView" to group "projects" with tIndex
      dispatch "selectionChanged" to group "projects" with tIndex
   else
      ClearAndDisable
   end if
   put ArrayToJSON(sProjects) into url ("binfile:"&ProjectsFile())
end DeleteProject

on SaveProject pIndex
   if pIndex is not empty then
      put the dgDataOfIndex[pIndex] of group "projects" into tData
      put fld "build path" into tData["build path"]
      put the dgData of group "stackFiles" into tStacks
      repeat with tIndex = 1 to the number of elements of tStacks
         put tStacks[tIndex]["file"] into tData["stackFiles"][tIndex]
      end repeat
      put ArrayToJSON(tData,,true) into url ("binfile:"&sProjects[pIndex])
      set the dgDataOfIndex[pIndex] of group "projects" to tData
   end if
end SaveProject

on ClearAndDisable
   put empty into fld "project path"
   put empty into fld "build path"
   set the dgData of group "stackFiles" to empty 
end ClearAndDisable

function PathForProject pIndex
   set the itemDel to slash
   return item 1 to -2 of sProjects[pIndex]
end PathForProject

on ExportProjectAtIndex pIndex
   ExportProject sProjects[pIndex]
end ExportProjectAtIndex

on ImportProjectAtIndex pIndex
   ImportProject sProjects[pIndex]
end ImportProjectAtIndex

on lcVCSExport
   if the target is me then
      set the dgData of group "projects" to empty
      set the dgData of group "stackfiles" to empty
      set the text of fld "project path" to empty
      set the text of fld "build path" to empty
   end if
end lcVCSExport
