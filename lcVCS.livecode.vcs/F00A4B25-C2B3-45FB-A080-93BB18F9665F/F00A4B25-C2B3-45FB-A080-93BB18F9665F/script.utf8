

-- bug #8884 : the following are missing from "the properties"
constant kMissingProps = "filename,innershadow,innerglow,outerglow,dropshadow,coloroverlay,fillgradient,strokegradient,resizeQuality,paintCompression"
constant kColorProps = "foregroundColor,backgroundColor,hiliteColor,borderColor,topColor,bottomColor,shadowColor,focusColor"
constant kPatternProps = "foregroundPattern,backgroundPattern,hilitePattern,borderPattern,topPattern,bottomPattern,shadowPattern,focusPattern"
constant kIconProps = "icon,hiliteIcon,disabledIcon,borderPattern,visitedIcon,armedIcon,hoverIcon"
constant kUnicodeProps = "Label,Text,ToolTip,Title"
constant kDeleteProps = "colors,patterns,orientation,scroll,framecount,id,visited" -- no longer relevant
constant kTempNameSuffix = " temp"

local sIDMap,sUUIDsToResolve

command ExportStackFile pFilePath
   local tFolder,tStacks,tSubstacks,tIndex,tJSON
   lock screen
   delete variable sIDMap
   if there is a stack pFilePath then
      -- mainstack
      lock messages
      put pFilePath into tFolder
      put ".vcs" after tFolder
      if there is not a folder tFolder then
         create folder tFolder
      end if
      set the defaultFolder to tFolder
      put ExportStack(the mainstack of stack pFilePath) into tStacks["mainstack"]["uuid"]
      put the mainstack of stack pFilePath into tStacks["mainstack"]["name"]
      -- substacks
      put the substacks of stack pFilePath into tSubstacks
      put 1 into tIndex
      repeat for each line tStack in the substacks of stack pFilePath
         set the defaultFolder to tFolder
         put ExportStack(tStack) into tStacks["substack"][tIndex]["uuid"]
         put tStack into tStacks["substack"][tIndex]["name"]
         add 1 to tIndex
      end repeat
      set the defaultFolder to tFolder
      -- delete folders from deleted stacks
      repeat for each line tFolder in the folders
         if tFolder is not ".." and sIDMap[tFolder] is empty then
            revDeleteFolder tFolder
         end if
      end repeat
      put ArrayToJSON(tStacks,,true) into tJSON
      if url ("binfile:index.json") <> tJSON then
         put tJSON into url ("binfile:index.json")
      end if
   end if
   save stack pFilePath
end ExportStackFile

on ImportStackFile pFolder
   local tStackFIleIndex
   lock screen
   lock messages
   delete variable sIDMap
   delete variable sUUIDsToResolve
   set the defaultFolder to pFolder
   if there is not a file "index.json" then
      exit ImportStackFile
   end if
   put JSONToArray(url "binfile:index.json") into tStackFileIndex
   -- support VCS on self
   if tStackFileIndex["mainstack"]["name"] is "lcVCS" then
      put kTempNameSuffix after tStackFileIndex["mainstack"]["name"]
   end if
   if there is a stack tStackFileIndex["mainstack"]["name"] then
      delete stack tStackFileIndex["mainstack"]["name"]
   end if
   ImportStack tStackFileIndex["mainstack"]["uuid"],tStackFileIndex["mainstack"]["name"] is "lcVCS temp"
   repeat for each key tIndex in tStackFileIndex["substack"]
      -- support VCS on self
      if tStackFileIndex["mainstack"]["name"] is "lcVCS temp" then
         put kTempNameSuffix after tStackFileIndex["substack"][tIndex]["name"]
      end if
      -- deleting the mainstack should purge the substacks but better to make sure
      if there is a stack tStackFileIndex["substack"][tIndex]["name"] then
         delete stack tStackFileIndex["substack"][tIndex]["name"]
      end if
      ImportStack tStackFileIndex["substack"][tIndex]["uuid"],tStackFileIndex["mainstack"]["name"] is "lcVCS temp"
      set the mainstack of stack tStackFileIndex["substack"][tIndex]["name"] to tStackFileIndex["mainstack"]["name"]
   end repeat
   -- only load uuids from all mainstacks if necessary
   put true into tLoadedUUIDs
   repeat for each key tObject in sUUIDsToResolve
      repeat for each key tProperty in sUUIDsToResolve[tObject]
         -- resolve uuid references (icons, patterns, behaviors)
         -- load uuids from all mainstacks only if required
         if there is not a sIDMap[sUUIDsToResolve[tObject][tProperty]] and not tLoadedUUIDs then
            repeat for each line tMainstack in the mainstacks
               repeat for each line tStack in tMainstack&cr&the substacks of stack tMainstack
                  -- behavior buttons
                  repeat with tControl =1 to the number of buttons of stack tStack
                     if the uVersion["uuid"] of btn tControl of stack tStack <> "" then
                        put the long id of btn tControl of stack tStack into sIDMap[the uVersion["uuid"] of btn tControl of stack tStack]
                     end if
                  end repeat
                  -- images
                  repeat with tControl =1 to the number of images of stack tStack
                     if the uVersion["uuid"] of image tControl of stack tStack <> "" then
                        put the long id of image tControl of stack tStack into sIDMap[the uVersion["uuid"] of image tControl of stack tStack]
                     end if
                  end repeat
               end repeat
            end repeat
         end if
         if there is a sIDMap[sUUIDsToResolve[tObject][tProperty]] then
            switch tProperty
               case "behavior"
                  set the tProperty of tObject to sIDMap[sUUIDsToResolve[tObject][tProperty]]
                  break
               case "defaultButton"
                  set the default of sIDMap[sUUIDsToResolve[tObject][tProperty]] to true
                  break
               case "row template"
                  set the dgProps["row template"] of tObject to word 1 to -4 of the long id of sIDMap[sUUIDsToResolve[tObject][tProperty]]
                  break
               default
                  set the tProperty of tObject to the short id of sIDMap[sUUIDsToResolve[tObject][tProperty]]
                  break
            end switch
         end if
      end repeat
   end repeat
   set the itemDel to "."
   if item -1 of pFolder = "vcs" then
      delete item -1 of pFolder
   end if
   set the fileName of stack tStackFileIndex["mainstack"]["name"] to pFolder
   go cd 1 of stack tStackFileIndex["mainstack"]["name"]
   if tStackFileIndex["mainstack"]["name"] = "lcVCS temp" then
      send "PostImportStack" to stack tStackFileIndex["mainstack"]["name"] in 0 milliseconds
   end if
end ImportStackFile

-- if the stack gets this message then it just 
-- imported a version of itself with a temp name
on PostImportStack
   -- delete stacks (remove stackfile from memory)
   put the short name of this stack into tStack
   put tStack into tStackName
   replace kTempNameSuffix with empty in tStackName
   if there is a stack tStackName then
      delete stack tStackName
   end if
   -- set names correctly
   set the name of stack tStack to tStackName
   put the substacks of this stack into tSubstacks
   repeat for each line tStack in tSubstacks
      put tStack into tStackName
      replace kTempNameSuffix with empty in tStackName
      if there is a stack tStackName then
         delete stack tStackName
      end if
      set the name of stack tStack to tStackName
   end repeat
end PostImportStack

on ImportStack pUUID,pThisStack
   local tStackIndex
   put JSONToArray(url ("binfile:"&pUUID&"/index.json")) into tStackIndex
   -- import objects
   get tStackIndex
   ImportObject tStackIndex,pUUID,,pThisStack
   delete card 1
   close this stack
end ImportStack

on ImportObject pObjectIndex,pStackUUID,pGroup,pThisStack
   local tObject,tSetName,tType
   put JSONToArray(url ("binfile:"&pStackUUID&"/"&pObjectIndex["uuid"]&"/properties.json")) into tObject
   put uniDecode(uniEncode(pObjectIndex["name"],"UTF8"),"ANSI") into pObjectIndex["name"]
   switch pObjectIndex["class"]
      case "com.runrev.engine.stack"
         if pThisStack then
            create stack (pObjectIndex["name"]&kTempNameSuffix)
         else
            create stack pObjectIndex["name"]
         end if
         set the defaultStack to it
         set the loc of it to the screenLoc
         break
      case "com.runrev.engine.card"
         create card pObjectIndex["name"]
         break
      case "com.runrev.engine.image"
         if word 1 of pGroup is "group" then
            create image pObjectIndex["name"] in pGroup
         else
            create image pObjectIndex["name"]
         end if
         if there is a file (pStackUUID&"/"&pObjectIndex["uuid"]&"/image."&tObject["properties"]["paintCompression"]) then
            set the text of it to url ("binfile:"&pStackUUID&"/"&pObjectIndex["uuid"]&"/image."&tObject["properties"]["paintCompression"])
         end if
         delete variable tObject["properties"]["paintCompression"]
         break
      case "com.runrev.engine.button"
         ##! workaround bug http://quality.runrev.com/show_bug.cgi?id=10696
         set the style of the templateButton to tObject["properties"]["style"]
         delete variable tObject["properties"]["style"]
         if word 1 of pGroup is "group" then
            create button pObjectIndex["name"] in pGroup
         else
            create button pObjectIndex["name"]
         end if
         break
      case "com.runrev.engine.field"
         if word 1 of pGroup is "group" then
            create field pObjectIndex["name"] in pGroup
         else
            create field pObjectIndex["name"]
         end if
         break
      case "com.runrev.engine.player"
         if word 1 of pGroup is "group" then
            create player pObjectIndex["name"] in pGroup
         else
            create player pObjectIndex["name"]
         end if
         break
      case "com.runrev.engine.scrollbar"
         if word 1 of pGroup is "group" then
            create scrollbar pObjectIndex["name"] in pGroup
         else
            create scrollbar pObjectIndex["name"]
         end if
         break
      case "com.runrev.engine.graphic"
         if word 1 of pGroup is "group" then
            create graphic pObjectIndex["name"] in pGroup
         else
            create graphic pObjectIndex["name"]
         end if
         break
      case "com.runrev.engine.group"
         if word 1 of pGroup is "group" then
            create group pObjectIndex["name"] in pGroup
         else
            create group pObjectIndex["name"]
         end if
         break
      default
         ##! TODO
         -- custom control so find appropriate template object
         -- copy it to the appropriate spot
         
         break
   end switch
   if pObjectIndex["class"] <> "com.runrev.engine.stack" then
      put the abbrev id of it &" of "& sIDMap[pStackUUID] into sIDMap[pObjectIndex["uuid"]]
   else
      put it into sIDMap[pObjectIndex["uuid"]]
   end if
   set the itemDel to ","
   -- workaround for rect messing up gradients issue
   if  pObjectIndex["class"] is "com.runrev.engine.graphic" and tObject["properties"]["rect"] is not empty then
      set the rect of sIDMap[pObjectIndex["uuid"]] to tObject["properties"]["rect"]
   end if
   delete variable tObject["properties"]["name"]
   repeat for each key tProperty in tObject["properties"]
      switch
         case tProperty is among the items of kIconProps,kPatternProps
         case tProperty is "behavior"
         case tProperty is "defaultButton"
            -- store the value 
            if tObject["properties"][tProperty] <> "" then
               put tObject["properties"][tProperty] into sUUIDsToResolve[sIDMap[pObjectIndex["uuid"]]][tProperty]
            end if
            break
         case char 8 to -1 of tProperty is among the items of kUnicodeProps -- "unicode"&tProperty
            -- utf8 encoded
            set the tProperty of sIDMap[pObjectIndex["uuid"]] to uniEncode(tObject["properties"][tProperty],"UTF8")
            break
         case tProperty is "cards"
            -- it's a background that needs to be placed
            repeat for each key tIndex in tObject["properties"][tProperty]
               try -- throws error if it's already on the card
                  place sIDMap[pObjectIndex["uuid"]] onto sIDMap[tObject["properties"][tProperty][tIndex]]
               end try
            end repeat
            break
         case tProperty is among the items of "htmlText,hilite"
            if tObject["properties"][tProperty] is an array then
               put the short id of sIDMap[pObjectIndex["uuid"]] into tID
               repeat for each key tUUID in tObject["properties"][tProperty]
                  put "control id "&tID&" of "&sIDMap[tUUID] into tControl
                  set the tProperty of tControl to tObject["properties"][tProperty][tUUID]
               end repeat
               break
            end if
         default
            set the tProperty of sIDMap[pObjectIndex["uuid"]] to tObject["properties"][tProperty]
            break
      end switch
   end repeat
   -- workaround for properties reseting rect of group issue
   if  pObjectIndex["class"] is "com.runrev.engine.group" and tObject["properties"]["rect"] is not empty then
      set the rect of sIDMap[pObjectIndex["uuid"]] to tObject["properties"]["rect"]
   end if
   repeat for each key tCustomPropertySet in tObject["customPropertySets"]
      if tCustomPropertySet = "dgProps" then
         put tObject["customPropertySets"][tCustomPropertySet]["row template"] into sUUIDsToResolve[sIDMap[pObjectIndex["uuid"]]]["row template"]
      end if
      if tCustomPropertySet is "customKeys" then
         set the customProperties[""] of sIDMap[pObjectIndex["uuid"]] to tObject["customPropertySets"][tCustomPropertySet]
      else
         set the customProperties[uniDecode(uniEncode(tCustomPropertySet,"UTF8"),"ANSI")] of sIDMap[pObjectIndex["uuid"]] to tObject["customPropertySets"][tCustomPropertySet]
      end if
   end repeat
   set the script of sIDMap[pObjectIndex["uuid"]] to uniDecode(uniEncode(url ("binfile:"&pStackUUID&"/"&pObjectIndex["uuid"]&"/script.utf8"),"UTF8"),"ANSI")
   put pObjectIndex["uuid"] into tVersion["UUID"]
   put the short id of sIDMap[pObjectIndex["uuid"]] into tVersion["ID"]
   set the customProperties["uVersion"] of sIDMap[pObjectIndex["uuid"]] to tVersion
   repeat with tIndex = 1 to the number of elements of pObjectIndex["objects"]
      ImportObject pObjectIndex["objects"][tIndex],pStackUUID,sIDMap[pObjectIndex["uuid"]]
   end repeat
end ImportObject

private function uuidForObject pObject
   if not exists(pObject) then return empty
   put word -2 to -1 of pObject into tStack
   put the customProperties["uVersion"] of pObject into tVersion
   if tVersion["UUID"] = ""  or \
         (the short id of pObject <> tVersion["ID"] and \
         there is a control id tVersion["ID"] of tStack and \
         tVersion["UUID"] = the uVersion["UUID"] of control id tVersion["ID"] of tStack) then
      _internal call "generate_uuid"
      put the result into tVersion["UUID"]
      put the short id of pObject into tVersion["ID"]
      set the customProperties["uVersion"] of pObject to tVersion
   end if
   return tVersion["UUID"]
end uuidForObject

function ExportStack pStack
   local tIndex,tIsOpen
   put pStack is among the lines of the openstacks into tIsOpen
   if not tIsOpen then
      go stack pStack
   end if
   put uuidForObject(the long id of stack pStack) into tUUID
   if there is not a folder tUUID then
      create folder tUUID
   end if
   set the defaultFolder to tUUID
   put ExportObject(the long id of stack pStack,,true) into tStack
   put ArrayToJSON(tStack,,true) into tJSON
   if url ("binfile:index.json") <> tJSON then
      put tJSON into url ("binfile:index.json")
   end if
   if not tIsOpen then
      close stack pStack
   end if
   -- delete folders from deleted objects
   repeat for each line tFolder in the folders
      if tFolder is not ".." and sIDMap[tFolder] is empty then
         revDeleteFolder tFolder
      end if
   end repeat
   return tUUID
end ExportStack

function ExportObjectProperties pObject,pShared
   local tImage,tObject
   unlock messages
   dispatch "lcVCSExport" to pObject
   lock messages
   put uuidForObject(pObject) into tUUID
   if there is not a folder tUUID then
      create folder tUUID
   end if
   put tUUID into tReturn["uuid"]
   put pObject into sIDMap[tUUID]
   -- properties
   put the properties of pObject into tObject["properties"]
   -- we don't want object names that are really abbrev ids because the id might change
   if the short name of pObject <> the abbrev id of pObject then
      put uniDecode(uniEncode(tObject["properties"]["name"],"ANSI"),"UTF8") into tObject["properties"]["name"]
      put tObject["properties"]["name"] into tReturn["name"]
   else
      delete variable tObject["properties"]["name"]
   end if
   -- colors and patterns better as individual props
   repeat for each item tProperty in kDeleteProps
      delete variable tObject["properties"][tProperty]
   end repeat
   -- everything but shared groups is already in layer order so we just need to retain layer for shared groups
   if not(word 1 of pObject = "group" and the sharedBehavior of pObject) then
      delete variable tObject["properties"]["layer"]
   end if
   if tObject["properties"]["behavior"] is not empty then
      put uuidForObject(tObject["properties"]["behavior"]) into tObject["properties"]["behavior"]
   end if
   if the cIDEProperties["cCustomControlID"] of pObject <> "" then
      put the cIDEProperties["cCustomControlID"] of pObject into tObjectClass
   else
      put "com.runrev.engine."&word 1 of the abbrev id of pObject into tObjectClass
   end if
   put tObjectClass into tObject["class"]
   put tObject["class"] into tReturn["class"]
   try
      put the script of pObject into tScript
      if tScript <> "" then
         put uniDecode(uniEncode(tScript,"ANSI"),"UTF8") into tScript
      end if
   catch e
      put "-- password protected scripts unspported" into tScript
   end try
   repeat for each item tProperty in kUnicodeProps
      if tObject["properties"][tProperty] <> "" then
         try
            put "unicode"&tProperty into tUnicodeProperty
            put uniDecode(the tUnicodeProperty of pObject,"UTF8") into tObject["properties"][tUnicodeProperty]
            delete variable tObject["properties"][tProperty]
         end try
      end if
   end repeat
   repeat for each item tProperty in kMissingProps
      try
         put the tProperty of pObject into tObject["properties"][tProperty]
      end try
   end repeat
   if word 1 of pObject is not "image" then
      repeat for each item tProperty in kColorProps
         try
            put the tProperty of pObject into tObject["properties"][tProperty]
         end try
      end repeat
      repeat for each item tProperty in kPatternProps
         try
            put the tProperty of pObject into tID
            if tID <> "" and tID <> 0 then
               put iconImage(tID,pObject) into tObject["properties"][tProperty]
               if there is a tObject["properties"][tProperty] then
                  put uuidForObject(tObject["properties"][tProperty]) into tObject["properties"][tProperty]
               end if
            end if
         end try
      end repeat
   end if
   switch word 1 of pObject
      case "stack"
         -- should be saved next to the folder
         delete variable tObject["properties"]["filename"]
         -- only want conflict on width and height difference not stack location
         delete variable tObject["properties"]["rect"]
         put the width of pObject into tObject["properties"]["width"]
         put the height of pObject into tObject["properties"]["height"]
         break
      case "image"
         put the text of pObject into tImage
         if url ("binfile:"& tReturn["uuid"]&"/image."&tObject["properties"]["paintCompression"]) <> tImage then
            put tImage into url ("binfile:"& tReturn["uuid"]&"/image."&tObject["properties"]["paintCompression"])
         end if
         delete variable tObject["properties"]["size"}
         break
      case "card"
         delete variable tObject["properties"]["rect"]
         if tObject["properties"]["defaultButton"] <> "" then
            put uuidForObject(tObject["properties"]["defaultButton"]) into tObject["properties"]["defaultButton"]
         end if
         break
      case "group"
         put the sharedBehavior of pObject into tObject["properties"]["sharedBehavior"]
         put the selectGroupedControls of pObject into tObject["properties"]["selectGroupedControls"]
         if tObject["properties"]["sharedBehavior"] then
            --put word -2 to -1 of pObject into tStack
            put 1 into tIndex
            repeat for each line tCardName in the cardNames of pObject
               try
                  put the long id of card tCardName into tID
               catch e
                  put the long id of tCardName into tID
               end try
               put uuidForObject(tID) into tObject["properties"]["cards"][tIndex]
               add 1 to tIndex
            end repeat 
         end if
         break
      case "button"
         if not the sharedHilite of pObject and pShared then
            put word 3 of pObject into tID
            repeat for each line tCardID in the cardIDs of the topStack
               if there is a button id tID of card id tCardID of the topStack then
                  put uuidForObject(the long id of card id tCardID of the topStack) into tUUID
                  put the hilite of button id tID of card id tCardID of the topStack into tObject["properties"]["hilite"][tUUID]
               end if
            end repeat 
         end if 
         repeat for each item tProperty in kIconProps
            try
               if tObject["properties"][tProperty] <> "" and tObject["properties"][tProperty] <> 0 then
                  put iconImage(tObject["properties"][tProperty],pObject) into tObject["properties"][tProperty]
                  if tObject["properties"][tProperty] is not an integer then
                     put uuidForObject(tObject["properties"][tProperty]) into tObject["properties"][tProperty]
                  end if
               end if
            end try
         end repeat
         break
      case "field"
         if not the sharedText of pObject and pShared then
            put word 3 of pObject into tID
            repeat for each line tCardID in the cardIDs of the topStack
               if there is a field id tID of card id tCardID of the topStack then
                  put uuidForObject(the long id of card id tCardID of the topStack) into tUUID
                  put the htmlText of field id tID of card id tCardID of the topStack into tObject["properties"]["htmlText"][tUUID]
               end if
            end repeat 
         end if
         break
   end switch
   if there is a stack tObjectClass then
      put the cControlData of stack tObjectClass into tControlData
      put tControlData["template_group"] into tTemplateObject
   else
      put "the template"&word 1 of pObject into tTemplateObject
   end if
   repeat for each key tProperty in tObject["properties"]
      if tObject["properties"][tProperty] is the tProperty of tTemplateObject and tProperty is not "textAlign" then
         -- double check that we are not comparing an array to a simple var
         if (tObject["properties"][tProperty] is an array and the tProperty of tTemplateObject is an array) or \
               (tObject["properties"][tProperty] is not an array and the tProperty of tTemplateObject is not an array) then
            delete variable tObject["properties"][tProperty]
         end if
      end if
   end repeat
   -- custom properties
   if the customKeys of pObject is not empty or the customPropertySets of pObject is not empty then
      put 1 into tIndex
      repeat for each line tCustomPropertySet in ""&cr&the customPropertySets of pObject
         put the customProperties[tCustomPropertySet] of pObject into tPropertySetA
         put the customProperties[tCustomPropertySet] of tTemplateObject into tTemplatePropertySetA
         if tCustomPropertySet = "" then put "customKeys" into tCustomPropertySet
         switch tCustomPropertySet
            case "uVersion"
               break
            case "cREVGeneral"
               -- delete some unnecessaries
               delete variable tPropertySetA["breakpointconditions"]
               delete variable tPropertySetA["breakpointstates"]
               delete variable tPropertySetA["breakpoints"]
               delete variable tPropertySetA["scripteditorselection"]
               delete variable tPropertySetA["scripteditorvscroll"]
               delete variable tPropertySetA["bookmarks"]
               delete variable tPropertySetA["handlerList"]
               delete variable tPropertySetA["scriptSelection"]
               delete variable tPropertySetA["prevHanlder"]
               delete variable tPropertySetA["tempScript"]
               delete variable tPropertySetA["script"]
               delete variable tPropertySetA["scriptCheckSum"]
               delete variable tPropertySetA["stackfileversion"]
            case "dgProps"
               -- handle row template but need better way for custom control authors to deal with this
               if tPropertySetA["row template"] <> "" then
                  put uuidForObject(tPropertySetA["row template"]) into tPropertySetA["row template"]
               end if
            default
               if keys(tPropertySetA) is not empty then
                  if tTemplatePropertySetA is an array then
                     repeat for each key tProperty in tPropertySetA
                        if tPropertySetA[tProperty] = tTemplatePropertySetA[tProperty] then
                           delete variable tPropertySetA[tProperty]
                        end if
                     end repeat
                  end if
                  if the number of elements in tPropertySetA > 0 then
                     put tPropertySetA into tObject["customPropertySets"][uniDecode(uniEncode(tCustomPropertySet,"ANSI"),"UTF8")]
                  end if
                  add 1 to tIndex
               end if
               break
         end switch
      end repeat
   end if
   if the number of elements of tObject["customPropertySets"] is 0 then
      delete variable tObject["customPropertySets"]
   end if
   if the number of elements of tObject["properties"] is 0 then
      delete variable tObject["properties"]
   end if
   put ArrayToJSON(tObject,,true) into tJSON
   if url ("binfile:"& tReturn["uuid"]&"/properties.json") <> tJSON then
      put tJSON into url ("binfile:"& tReturn["uuid"]&"/properties.json")
   end if
   if tScript <> "" and url ("binfile:"& tReturn["uuid"]&"/script.utf8") <> tScript then
      put tScript into url ("binfile:"& tReturn["uuid"]&"/script.utf8")
   end if
   return tReturn
end ExportObjectProperties

function ExportObject pObject,pShared
   -- properties of stack
   put ExportObjectProperties(pObject,pShared) into tStack
   -- child objects
   put 1 into tIndex
   switch word 1 of pObject
      case "stack"
         -- cards
         repeat for each line tID in the cardIDs of pObject
            put ExportObject(the long id of card id tID of pObject) into tStack["objects"][tIndex]
            add 1 to tIndex
         end repeat
         -- shared groups
         if the sharedGroupIDs of pObject is not empty then
            repeat for each line tID in the sharedGroupIDs of pObject
               put ExportObject(the long id of background id tID of pObject,true) into tStack["objects"][tIndex]
               add 1 to tIndex
            end repeat
         end if
         break
      case "card"
      case "group"
         -- only if it's not a cusom control
         if the cIDEProperties["cCustomControlID"] of pObject = "" then
            repeat with tControl=1 to the number of controls of pObject
               put the long id of control tControl of pObject into tControlID
               if the long id of the owner of tControlID is pObject and \
                     not (word 1 of tControlID is "group" and \
                     the sharedBehavior of tControlID) then
                  put ExportObject(tControlID,pShared) into tStack["objects"][tIndex]
                  add 1 to tIndex
               end if
            end repeat
         end if
         break
   end switch
   return tStack
end ExportObject

function q pParam
   return quote&pParam&quote
end q

function needsEncoding pData
   if pData contains null then return true
   repeat for each byte tByte in pData
      put charToNum(tByte) into tNum
      if tNum < 9 or (tNum > 13 and tNum < 32) or tNum = 11 or tNum = 12 or tNum > 126 then
         return true
      end if
   end repeat
   return false
end needsEncoding

function iconImage pID,pObject
   --1) The stack of the object's behavior (if applicable)
   --2) The stack of the owner of the object's behavior (if applicable)
   -- ...
   --n) The stack of the object's stack's behavior (if applicable)
   put checkBehaviors(pID,pObject) into tImage
   if tImage is not empty then
      return tImage
   end if
   --A) The object's stack
   if word -5 of pObject = "stack" then 
      -- substack
      put word -5 to -4 of pObject into tStack
   else
      put word -2 to -1 of pObject into tStack
   end if
   if there is an image id pID of tStack then
      return the long id of image id pID of tStack
   end if
   --B) The object's stack's mainstack (if a substack)
   if the short name of tStack is not the mainstack of tStack then
      if there is an image id pID of stack the mainstack of tStack then
         return the long id of image id pID of the mainstack of tStack
      end if
   end if
   --C) The object's stack's mainstacks substacks
   repeat for each line tSubstack in the substacks of the maintack of tStack
      if there is an image id pID of stack tSubstack then
         return the long id of image id pID of stack tSubstack
      end if
   end repeat
   --D) The list of open stacks, in order they were loaded
   repeat for each line tStack in the mainstacks
      if there is an image id pID of stack tStack then
         return the long id of image id pID of stack tStack
      end if
      repeat for each line tSubStack in the substacks of tStack
         if there is an image pID of stack tSubStack then
            return the long id of image pID of stack tSubStack
         end if
      end repeat
   end repeat
   return pID
end iconImage

function checkBehaviors pID,pObject
   put word -2 to -1 of the behavior of pObject into tStack
   if the behavior of pObject <> ""  and \
         there is an image id pID of tStack then
      return the long id of image id pID of tStack
   else
      if word 1 of pObject = "stack" then
         return ""
      else
         return checkBehaviors(pID,the long id of the owner of pObject)
      end if
   end if
end checkBehaviors

-- pArray - array to be encoded
-- pForceRootType - can force the root to be an object if it looks like an array
-- pPretty - include whitespace
function ArrayToJSON pArray,pForceRootType,pPretty
   local tArray,tKeys
   repeat for each line tKey in the keys of pArray
      if pArray[tKey] is an array then
         put "}"&ArrayToJSON(pArray[tKey],pForceRootType) into tArray[tKey]
      else if needsEncoding(pArray[tKey]) then
         put "base64Decode("&base64Encode(pArray[tKey])&")" into tArray[tKey]
      else 
         -- force all elements to be strings
         put "}}"&pArray[tKey] into tArray[tKey]
      end if
   end repeat
   return mergJSONEncode("tArray",pForceRootType,pPretty)
end ArrayToJSON

function JSONToArray pJSON
   local tArray,tKeys
   if pJSON = "" then return ""
   put mergJSONDecode(pJSON,"tArray") into tKeys
   repeat for each line tKey in the keys of tArray
      if tKey is among the lines of tKeys then
         put JSONToArray(tArray[tKey]) into tArray[tKey]
      else
         if char 1 to 13 of tArray[tKey] is "base64Decode(" then
            put base64Decode(char 14 to -2 of tArray[tKey]) into tArray[tKey]
         end if
      end if
   end repeat
   return tArray
end JSONToArray
